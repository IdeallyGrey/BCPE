#!/bin/bash

#    Copyright (C) 2021  Lukas Hamm (email: ideallygrey@tuta.io)
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.


# An editor to design custom command prompts.
# Quick overview of the code: Since there are certain ASCII codes that only work
# in the command prompt, and since some 'items' have different lengths of characters,
# three main string variables exist. One is used to store the design while in the
# editor (easy_edit_form), another one to display your design in the editor
# (display_form), and finally the actual string that is saved (full_form).
# A design is saved by adding a few lines to the end of your .bashrc file.
# Since a .bashrc file is rather useful, it is backed up prior to saving in case
# something goes wrong, and is saved as '.bashrc_backup_made_by_bcpe'.

# Some variables
easy_edit_form=""
color="White"
display_form=""
full_form=""
size_of_easy_edit_form=0
extra_message=""
main_seg_active=1
var_for_cutting=1
check_this_out="blank"

# Functions

# A function to prompt/read an interactive y/n response
# Stops reading after one character, meaning only 'y' or 'Y' will return 0
# _anything_ else will return 1
confirm() {
  read -rn 1 -p "${*:-Continue} [Y/N]? "
  printf -- '%s\n' ""
  case "${REPLY}" in
    ([yY]) return 0 ;;
    (*)    return 1 ;;
  esac
}

die() {
  printf -- '%s\n' \
    "The program has been terminated due to error:"
    "${*:Reason unknown}" \
    "Please report this issue." >&2
  exit 1
}

# Displayed several times at the top of the screen
header () {
  clear
  cat << EOF

--- Command Prompt Editor ---


---
${display_form}
---
${extra_message}

EOF
}

# Its a very basic loading animation.
sleep_dot () {
  local count
  count="${1:-1}"
  for (( i=0;i<count;++i )); do
    printf -- '%s\n' "."
    sleep 1
  done
}

usage() {
  cat << EOF
'q!' to force quit. 'wr' to write/enable custom prompt.
'rm' to remove last char/item. 'ex' to export as .txt to share your design.
Item codes:
sp - Insert a 'space'.
1a - Makes computer beep when printed. May not work on all systems.
1b - Current date. Format: Weekday Month Date (ex: Mon January 3)
1c - Hostname of the machine, with the trailing domain name removed.
1d - Full hostname.
1e - Number of jobs being run by the shell.
1f - Name of the terminal device.
1g - Name of the shell program.
1h - Time in 24 hour format, HH:MM:SS.
1i - Time in 12 hour format, HH:MM:SS.
1j - Time in 12 hour AM/PM format.
1k - Time in 24 hour format, HH:MM.
1l - Username of the current user.
1m - The version of bash in use (x.xx).
1n - The release of bash in use (x.xx.x).
1o - The full name of the current directory (ex: ~/Documents/School/Project).
1p - The last part of the name of the current directory (ex: /Project).
1q - The history number of this command.
1r - The number of commands run in this shell session.
1s - Displays a $ if logged in as user, instead displays a # if logged in as root.

EOF
}

char_prompt() {
  printf -- '%s\n' "Enter a single character, or a two character command/item: "
  read -r input_selection
  case "${input_selection}" in
    (%)
      printf -- '%s\n' "I'm sorry, you cannot use a '%' sign. Any other character is allowed!"
      add_seperator=false
      sleep_dot 3
    ;;
    (sp)  easy_edit_form+=" " ;;
    # Commands
    (q!) die "Program has been manually terminated." ;;
    (rm)
      if ((size_of_easy_edit_form>0)); then
        size_of_easy_edit_form=$((size_of_easy_edit_form-1))
        easy_edit_form=$(printf -- '%s\n' "${easy_edit_form}" | cut -d '%' -f 1-${size_of_easy_edit_form})
        # Here, the size is reduced again, but the loss is made of for in the 'if' right below this 'case'
        size_of_easy_edit_form=$((size_of_easy_edit_form-1))
      else
        printf -- '%s\n' "There is nothing to delete!"
        add_seperator=false
        sleep_dot 3
      fi
    ;;
    (wr)
      main_seg_active=0
      add_seperator=false
    ;;
    (ex)
      printf -- '%s\n' "Sorry! Exporting is not yet supported."
      add_seperator=false
      sleep_dot 3
    ;;
    # Items
    (1[a-s])  easy_edit_form+=${input_selection} ;;
    (?)  easy_edit_form+=${input_selection} ;;
    (*)
      printf -- '%s\n' "Error! Remember, characters must be entered one at a time! / Error! That is not a valid multi-char code!"
      add_seperator=false
      sleep_dot 4
    ;;
  esac
}

color_prompt() {
  printf -- '%s\n' "Select a color:"
  printf -- '%s\t\033[1;37m%s\t\033[0;30m%s\t\033[0;31m%s\n' \
    "Default - 1" "Bold White - 2" "Black - 3" "Red - 4"
  printf -- '\033[0;32m%s\t\033[0;33m%s\t\033[0;34m%s\t\033[0;35m%s\n' \
    "Green - 5" "Brown - 6" "Blue - 7" "Purple - 8"
  printf -- '\033[0;36m%s\t\033[0;37m%s\t\033[1;30m%s\t\033[1;31m%s\n' \
    "Cyan - 9" "Light Grey - 10" "Dark Grey - 11" "Light Red - 12"
  printf -- '\033[1;32m%s\t\033[1;33m%s\t\033[1;34m%s\t\033[1;35m%s\n' \
    "Light Green - 13" "Yellow - 14" "Light Blue - 15" "Light Purple - 16"
  printf -- '\033[1;372m%s\033[0;37m\n' "Light Cyan - 17"
  printf -- '%s\n' "Enter corresponding number:"
  read -r color
  full_form=""
  defaultselected=false
  case "${color}" in
    (1)   defaultselected=true; colour="Default"; second_seg_active=0 ;;
    (2)   full_form+="\[\033[1;37m\]"; colour="Bold White"; second_seg_active=0 ;;
    (3)   full_form+="\[\033[0;30m\]"; colour="Black"; second_seg_active=0 ;;
    (4)   full_form+="\[\033[0;31m\]"; colour="Red"; second_seg_active=0 ;;
    (5)   full_form+="\[\033[0;32m\]"; colour="Green"; second_seg_active=0 ;;
    (6)   full_form+="\[\033[0;33m\]"; colour="Brown"; second_seg_active=0 ;;
    (7)   full_form+="\[\033[0;34m\]"; colour="Blue"; second_seg_active=0 ;;
    (8)   full_form+="\[\033[0;35m\]"; colour="Purple"; second_seg_active=0 ;;
    (9)   full_form+="\[\033[0;36m\]"; colour="Cyan"; second_seg_active=0 ;;
    (10)  full_form+="\[\033[0;37m\]"; colour="Light Grey"; second_seg_active=0 ;;
    (11)  full_form+="\[\033[1;30m\]"; colour="Dark Grey"; second_seg_active=0 ;;
    (12)  full_form+="\[\033[1;31m\]"; colour="Light Red"; second_seg_active=0 ;;
    (13)  full_form+="\[\033[1;32m\]"; colour="Light Green"; second_seg_active=0 ;;
    (14)  full_form+="\[\033[1;33m\]"; colour="Yellow"; second_seg_active=0 ;;
    (15)  full_form+="\[\033[1;34m\]"; colour="Light Blue"; second_seg_active=0 ;;
    (16)  full_form+="\[\033[1;35m\]"; colour="Light Purple"; second_seg_active=0 ;;
    (17)  full_form+="\[\033[1;36m\]"; colour="Light Cyan"; second_seg_active=0 ;;
    (*)
      printf -- '%s\n' "Sorry, ${color} was not an option." >&2
      sleep_dot 3
    ;;
  esac
}

# Updates the variable 'full_form' drawing info from the variable 'easy_edit_form'
update_full_form () {
  printf -- '%s\n' "Updating full form."
  var_for_cutting=1
  while (( var_for_cutting <= size_of_easy_edit_form )); do
    check_this_out=$(printf -- '%s\n' "${easy_edit_form}" | cut -d '%' -f ${var_for_cutting})
    case "${check_this_out}" in
      # Items
      (1a)  full_form+="\[\a\]" ;;
      (1b)  full_form+="\d" ;;
      (1c)  full_form+="\h" ;;
      (1d)  full_form+="\H" ;;
      (1e)  full_form+="\j" ;;
      (1f)  full_form+="\l" ;;
      (1g)  full_form+="\s" ;;
      (1h)  full_form+="\t" ;;
      (1i)  full_form+="\T" ;;
      (1j)  full_form+="\@" ;;
      (1k)  full_form+="\A" ;;
      (1l)  full_form+="\u" ;;
      (1m)  full_form+="\v" ;;
      (1n)  full_form+="\V" ;;
      (1o)  full_form+="\w" ;;
      (1p)  full_form+="\W" ;;
      (1q)  full_form+="\!" ;;
      (1r)  full_form+="\#" ;;
      (1s)  full_form+="\$" ;;
      # Single chars
      (?)  full_form+=$check_this_out ;;
      # Something that should not be there
      (*)
        die "Custom command line string contains something that definitely should not be there."
      ;;
    esac
    var_for_cutting=$((var_for_cutting+1))
  done
  # full_form+=" "
}

# Updates the variable 'display_form' with info from variable 'easy_edit_form'
update_display_form () {
  printf -- '%s\n' "Updating display form."
  var_for_cutting=1
  display_form=""
  extra_message=""
  while (( var_for_cutting <= size_of_easy_edit_form )); do
    check_this_out=$(printf -- '%s\n' "${easy_edit_form}" | cut -d '%' -f ${var_for_cutting})
    case "${check_this_out}" in
      # Items
      (1a)
        display_form+="(Non-visable beep char.)"
        extra_message+="Should play beep. May be supressed on most systems."
      ;;
      (1b) display_form+="Mon January 1" ;;
      (1c) display_form+="${HOSTNAME}" ;;
      (1d) display_form+="${HOSTNAME}" ;;
      (1e) display_form+="(Number of active jobs)" ;;
      (1f) display_form+="(Terminal device name)" ;;
      (1g) display_form+="(Shell program name)" ;;
      (1h) display_form+="21:58:26" ;;
      (1i) display_form+="9:58:26" ;;
      (1j) display_form+="9:58:26 PM" ;;
      (1k) display_form+="21:58" ;;
      (1l) display_form+="${USER}" ;;
      (1m) display_form+="1.23" ;;
      (1n) display_form+="1.23.4" ;;
      (1o) display_form+="${HOME}/Documents/Directory/Example" ;;
      (1p) display_form+="/Example" ;;
      (1q) display_form+="(History # of this command)" ;;
      (1r) display_form+="(# of commands run during shell session)" ;;
      (1s) display_form+="(Displays '$' if normal user, or '#' if root user)" ;;
      # Single chars
      (?)  display_form+="${check_this_out}" ;;
    esac
    var_for_cutting=$((var_for_cutting+1))
  done
  return
}

# Last chance to escape
if ! confirm "Running this editor will clear your shell, do you want to continue?"; then
  die "Quitting..."
fi

# Starts from here
printf -- '%s\n' "If you have not used this editor before, or if you need a refresher, instructions can be found in the README file."
sleep_dot 4
begin_writing="no"
# This while loop contains the editor and the color choosing, and exists in order
# to allow someone to return to the editor prior to saving.
while [[ "${begin_writing}" = "no" ]]; do
  # This while loop contains the bulk of the editor.
  while [[ "${main_seg_active}" = 1 ]]; do
    update_display_form
    add_seperator=true
    header
    usage
    char_prompt
    if [[ "${add_seperator}" = "true" ]]; then
      easy_edit_form+="%"
      size_of_easy_edit_form=$((size_of_easy_edit_form+1))
    fi
  done # end of the main while loop

  # Here the color is choosen.
  update_display_form
  second_seg_active=1
  while [[ "${second_seg_active}" = 1 ]]; do
    header
    color_prompt
  done # End of color choosing 'while'
  update_full_form
  if [[ "${defaultselected}" != "true" ]]; then
    full_form+="\[\033[0m\] "
  fi
  confirm_seg_active=1
  # This while loop contain the writing confirmation.
  while [[ "$confirm_seg_active" = 1 ]]; do
    clear
    printf -- '\n%s\n' "--- Command Prompt Editor ---"
    printf -- '%s\n' ""
    printf -- '%s\n' "Enable command prompt:" "${display_form}" "With color: ${colour}"
    if confirm; then
      confirm_seg_active=0
      begin_writing=yes
    else
      confirm_seg_active=0
      clear
      printf -- '%s\n' "What would you like to do?
        - return to the editor (Enter '1'.)
        - quit without saving (Enter anything else.)"
      read -r return_or_quit
      if [[ "${return_or_quit}" = 1 ]]; then
        printf -- '%s\n' "Returning to editor..."
      else
        printf -- '%s\n' "Program was manually terminated."
        exit
      fi
    fi
  done
done

# The actual saving/enabling takes place here:
printf -- '%s\n' "Saving..."
bashrc=$(less ~/.bashrc)
bashrc+="
# ---Added by the custom command prompt editor---"
bashrc+="
PS1='${full_form}'
export PS1"
bashrc+="
# ---End added by the custom command prompt editor---"
mv ~/.bashrc ~/.bashrc_backup_made_by_bcpe
touch ~/.bashrc
printf -- '%s\n' "${bashrc}" | cat > ~/.bashrc
printf -- '%s\n' "To take effect, you need to start a new shell session. (Close and re-open your terminal.)"
printf -- '%s\n' "If you wish to undo any changes made, check the README file."
printf -- '%s\n' "Program complete."
